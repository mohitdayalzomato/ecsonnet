{
  new(
    name,
    image,
    essential=true,
    cpuUnits=0,
    memoryMb=null,
    memoryReservationMb=null,
    links=[],
    environment=[],
    workingDir=null,
    logConfiguration={
      logDriver: 'awslogs',
    },
    disableNetworking=null,
    command=null,
    entryPoint=null,
    dockerLabels={},
    portMappings=[],
    dnsSearchDomains=null,
    dnsServers=null,
    dockerSecurityOptions=null,
    extraHosts=null,
    healthCheck=null,
    hostname=null,
    linuxParameters=null,
    mountPoints=[],
    privileged=null,
    readonlyRootFilesystem=null,
    ulimits=null,
    user=null,
    volumesFrom=[],
  ):: {
    name: name,
    image: image,
    memory: memoryMb,
    cpu: cpuUnits,
    memoryReservation: memoryReservationMb,
    links: links,
    portMappings: portMappings,
    essential: essential,
    entryPoint: if entryPoint == [] then null else entryPoint,
    command: if command == [] then null else command,
    environment: environment,
    logConfiguration: logConfiguration,
    disableNetworking: disableNetworking,
    dockerLabels: dockerLabels,
    dnsSearchDomains: dnsSearchDomains,
    dnsServers: dnsServers,
    dockerSecurityOptions: dockerSecurityOptions,
    extraHosts: extraHosts,
    healthCheck: healthCheck,
    hostname: hostname,
    linuxParameters: linuxParameters,
    mountPoints: mountPoints,
    privileged: privileged,
    readonlyRootFilesystem: readonlyRootFilesystem,
    ulimits: ulimits,
    user: user,
    volumesFrom: volumesFrom,
    setDockerLabelKey(key, value):: self {
      dockerLabels+: { key: std.toString(value) },
    },
    addPortMapping(containerPort, hostPort, protocol='tcp'):: self {
      portMappings+: [{
        containerPort: containerPort,
        hostPort: hostPort,
        protocol: protocol,
      }],
    },
    addLink(link):: self {
      links+: [link],
    },
    setEnvironmentKey(key, value):: self {
      environment+: [{ name: key, value: value }],
    },
  },
}
